name: Deploy Frontend (Production)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: frontend-deploy-main
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PRODUCTION_DOMAIN: horekmart.com
  DEPLOY_BASE_PATH: /var/www/horekmart-frontend
  PM2_APP_NAME: horekmart-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build (production)
        env:
          NEXT_PUBLIC_API_URL: https://app.horekmart.com/api
          NEXT_PUBLIC_APP_URL: https://horekmart.com
          NODE_ENV: production
        run: npm run build

      - name: Export build metadata
        run: |
          echo "BUILD_SHA=${GITHUB_SHA}" > build-info.txt
          echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-info.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          retention-days: 2
          path: |
            .next
            package.json
            package-lock.json
            next.config.ts
            build-info.txt

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Sync build to server (rsync)
        run: |
          tar -czf artifact.tar.gz .next package.json package-lock.json next.config.ts build-info.txt
          scp artifact.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/artifact.tar.gz
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash -s' <<'EOF'
          set -euo pipefail
          APP_DIR=${DEPLOY_BASE_PATH}
          mkdir -p "$APP_DIR"
          cd "$APP_DIR"
          echo "� Extracting artifact"
          rm -rf .next.old || true
          if [ -d .next ]; then mv .next .next.old; fi
          tar -xzf /tmp/artifact.tar.gz
          echo "📦 Installing (production) dependencies (ci)"
          npm ci --omit=dev
          echo "� Build info:"; cat build-info.txt || true
          echo "🔄 Reloading PM2"
          pm2 start npm --name "${PM2_APP_NAME}" -- start || pm2 restart "${PM2_APP_NAME}" || pm2 reload "${PM2_APP_NAME}" || true
          echo "🧹 Cleaning old build"
          rm -rf .next.old || true
          echo "🩺 Health check"
          set +e
          for i in 1 2 3 4 5; do
            CODE=$(curl -k -s -o /dev/null -w "%{http_code}" https://${PRODUCTION_DOMAIN} || true)
            if [ "$CODE" = "200" ]; then echo "✅ Frontend healthy"; exit 0; fi
            echo "⏳ Attempt $i failed (status=$CODE). Retrying in 6s"; sleep 6
          done
          echo "❌ Frontend health check failed"; exit 1
          EOF

      - name: Report status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful: https://${{ env.PRODUCTION_DOMAIN }}"
          else
            echo "❌ Deployment failed"
            exit 1
          fi